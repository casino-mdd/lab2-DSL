/*
 * generated by Xtext 2.18.0
 */
package org.xtext.lab2.layeredStyle.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.lab2.layeredStyle.ide.contentassist.antlr.internal.InternalLayeredStyleDSLParser;
import org.xtext.lab2.layeredStyle.services.LayeredStyleDSLGrammarAccess;

public class LayeredStyleDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LayeredStyleDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LayeredStyleDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
			builder.put(grammarAccess.getSubRelationAccess().getAlternatives(), "rule__SubRelation__Alternatives");
			builder.put(grammarAccess.getLayerAccess().getGroup(), "rule__Layer__Group__0");
			builder.put(grammarAccess.getLayerSegmentAccess().getGroup(), "rule__LayerSegment__Group__0");
			builder.put(grammarAccess.getRelationAccess().getGroup(), "rule__Relation__Group__0");
			builder.put(grammarAccess.getLayeredStyleAccess().getElementsAssignment(), "rule__LayeredStyle__ElementsAssignment");
			builder.put(grammarAccess.getLayerAccess().getNameAssignment_1(), "rule__Layer__NameAssignment_1");
			builder.put(grammarAccess.getLayerAccess().getLayerSegmentsAssignment_3(), "rule__Layer__LayerSegmentsAssignment_3");
			builder.put(grammarAccess.getLayerSegmentAccess().getNameAssignment_1(), "rule__LayerSegment__NameAssignment_1");
			builder.put(grammarAccess.getRelationAccess().getNameAssignment_1(), "rule__Relation__NameAssignment_1");
			builder.put(grammarAccess.getRelationAccess().getTypeAssignment_8(), "rule__Relation__TypeAssignment_8");
			builder.put(grammarAccess.getRelationAccess().getTypeAssignment_11(), "rule__Relation__TypeAssignment_11");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LayeredStyleDSLGrammarAccess grammarAccess;

	@Override
	protected InternalLayeredStyleDSLParser createParser() {
		InternalLayeredStyleDSLParser result = new InternalLayeredStyleDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LayeredStyleDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LayeredStyleDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
