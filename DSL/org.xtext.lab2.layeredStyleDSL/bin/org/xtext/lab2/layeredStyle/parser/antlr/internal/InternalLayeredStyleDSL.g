/*
 * generated by Xtext 2.18.0
 */
grammar InternalLayeredStyleDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.lab2.layeredStyle.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.lab2.layeredStyle.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.lab2.layeredStyle.services.LayeredStyleDSLGrammarAccess;

}

@parser::members {

 	private LayeredStyleDSLGrammarAccess grammarAccess;

    public InternalLayeredStyleDSLParser(TokenStream input, LayeredStyleDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "LayeredStyle";
   	}

   	@Override
   	protected LayeredStyleDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleLayeredStyle
entryRuleLayeredStyle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLayeredStyleRule()); }
	iv_ruleLayeredStyle=ruleLayeredStyle
	{ $current=$iv_ruleLayeredStyle.current; }
	EOF;

// Rule LayeredStyle
ruleLayeredStyle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLayeredStyleAccess().getElementsAbstractElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleAbstractElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getLayeredStyleRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.lab2.layeredStyle.LayeredStyleDSL.AbstractElement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractElementRule()); }
	iv_ruleAbstractElement=ruleAbstractElement
	{ $current=$iv_ruleAbstractElement.current; }
	EOF;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getLayerParserRuleCall_0());
		}
		this_Layer_0=ruleLayer
		{
			$current = $this_Layer_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractElementAccess().getRelationParserRuleCall_1());
		}
		this_Relation_1=ruleRelation
		{
			$current = $this_Relation_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLayer
entryRuleLayer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLayerRule()); }
	iv_ruleLayer=ruleLayer
	{ $current=$iv_ruleLayer.current; }
	EOF;

// Rule Layer
ruleLayer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='layer'
		{
			newLeafNode(otherlv_0, grammarAccess.getLayerAccess().getLayerKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLayerAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLayerRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getLayerAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLayerAccess().getLayerSegmentsLayerSegmentParserRuleCall_3_0());
				}
				lv_layerSegments_3_0=ruleLayerSegment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLayerRule());
					}
					add(
						$current,
						"layerSegments",
						lv_layerSegments_3_0,
						"org.xtext.lab2.layeredStyle.LayeredStyleDSL.LayerSegment");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getLayerAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleLayerSegment
entryRuleLayerSegment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLayerSegmentRule()); }
	iv_ruleLayerSegment=ruleLayerSegment
	{ $current=$iv_ruleLayerSegment.current; }
	EOF;

// Rule LayerSegment
ruleLayerSegment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='segment'
		{
			newLeafNode(otherlv_0, grammarAccess.getLayerSegmentAccess().getSegmentKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLayerSegmentAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLayerSegmentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleRelation
entryRuleRelation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationRule()); }
	iv_ruleRelation=ruleRelation
	{ $current=$iv_ruleRelation.current; }
	EOF;

// Rule Relation
ruleRelation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='relation'
		{
			newLeafNode(otherlv_0, grammarAccess.getRelationAccess().getRelationKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRelationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRelationAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='type'
		{
			newLeafNode(otherlv_3, grammarAccess.getRelationAccess().getTypeKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getRelationAccess().getColonKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getRelationAccess().getSubRelationParserRuleCall_5());
		}
		ruleSubRelation
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_6='source'
		{
			newLeafNode(otherlv_6, grammarAccess.getRelationAccess().getSourceKeyword_6());
		}
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getRelationAccess().getColonKeyword_7());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelationRule());
					}
				}
				otherlv_8=RULE_ID
				{
					newLeafNode(otherlv_8, grammarAccess.getRelationAccess().getTypeLayerCrossReference_8_0());
				}
			)
		)
		otherlv_9='target'
		{
			newLeafNode(otherlv_9, grammarAccess.getRelationAccess().getTargetKeyword_9());
		}
		otherlv_10=':'
		{
			newLeafNode(otherlv_10, grammarAccess.getRelationAccess().getColonKeyword_10());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelationRule());
					}
				}
				otherlv_11=RULE_ID
				{
					newLeafNode(otherlv_11, grammarAccess.getRelationAccess().getTypeLayerCrossReference_11_0());
				}
			)
		)
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getRelationAccess().getRightCurlyBracketKeyword_12());
		}
	)
;

// Entry rule entryRuleSubRelation
entryRuleSubRelation returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSubRelationRule()); }
	iv_ruleSubRelation=ruleSubRelation
	{ $current=$iv_ruleSubRelation.current.getText(); }
	EOF;

// Rule SubRelation
ruleSubRelation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='AllowedToUse'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSubRelationAccess().getAllowedToUseKeyword_0());
		}
		    |
		kw='AllowedToUseBelow'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSubRelationAccess().getAllowedToUseBelowKeyword_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
