/*
 * generated by Xtext 2.18.0
 */
package org.xtext.lab2.layeredStyle.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LayeredStyleDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class LayeredStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.lab2.layeredStyle.LayeredStyleDSL.LayeredStyle");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//LayeredStyle:
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.lab2.layeredStyle.LayeredStyleDSL.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLayerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractElement:
		//	Layer | Relation;
		@Override public ParserRule getRule() { return rule; }
		
		//Layer | Relation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Layer
		public RuleCall getLayerParserRuleCall_0() { return cLayerParserRuleCall_0; }
		
		//Relation
		public RuleCall getRelationParserRuleCall_1() { return cRelationParserRuleCall_1; }
	}
	public class LayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.lab2.layeredStyle.LayeredStyleDSL.Layer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLayerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLayerSegmentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLayerSegmentsLayerSegmentParserRuleCall_3_0 = (RuleCall)cLayerSegmentsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Layer:
		//	'layer' name=ID '{'
		//	layerSegments+=LayerSegment*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'layer' name=ID '{' layerSegments+=LayerSegment* '}'
		public Group getGroup() { return cGroup; }
		
		//'layer'
		public Keyword getLayerKeyword_0() { return cLayerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//layerSegments+=LayerSegment*
		public Assignment getLayerSegmentsAssignment_3() { return cLayerSegmentsAssignment_3; }
		
		//LayerSegment
		public RuleCall getLayerSegmentsLayerSegmentParserRuleCall_3_0() { return cLayerSegmentsLayerSegmentParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class LayerSegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.lab2.layeredStyle.LayeredStyleDSL.LayerSegment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSegmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//LayerSegment:
		//	'segment' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'segment' name=ID
		public Group getGroup() { return cGroup; }
		
		//'segment'
		public Keyword getSegmentKeyword_0() { return cSegmentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.lab2.layeredStyle.LayeredStyleDSL.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cSubRelationParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cSourceKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cTypeLayerCrossReference_8_0 = (CrossReference)cTypeAssignment_8.eContents().get(0);
		private final RuleCall cTypeLayerIDTerminalRuleCall_8_0_1 = (RuleCall)cTypeLayerCrossReference_8_0.eContents().get(1);
		private final Keyword cTargetKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cTypeAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cTypeLayerCrossReference_11_0 = (CrossReference)cTypeAssignment_11.eContents().get(0);
		private final RuleCall cTypeLayerIDTerminalRuleCall_11_0_1 = (RuleCall)cTypeLayerCrossReference_11_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Relation:
		//	'relation' name=ID '{'
		//	'type' ':' SubRelation
		//	'source' ':' type=[Layer]
		//	'target' ':' type=[Layer]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'relation' name=ID '{' 'type' ':' SubRelation 'source' ':' type=[Layer] 'target' ':' type=[Layer] '}'
		public Group getGroup() { return cGroup; }
		
		//'relation'
		public Keyword getRelationKeyword_0() { return cRelationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//SubRelation
		public RuleCall getSubRelationParserRuleCall_5() { return cSubRelationParserRuleCall_5; }
		
		//'source'
		public Keyword getSourceKeyword_6() { return cSourceKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//type=[Layer]
		public Assignment getTypeAssignment_8() { return cTypeAssignment_8; }
		
		//[Layer]
		public CrossReference getTypeLayerCrossReference_8_0() { return cTypeLayerCrossReference_8_0; }
		
		//ID
		public RuleCall getTypeLayerIDTerminalRuleCall_8_0_1() { return cTypeLayerIDTerminalRuleCall_8_0_1; }
		
		//'target'
		public Keyword getTargetKeyword_9() { return cTargetKeyword_9; }
		
		//':'
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }
		
		//type=[Layer]
		public Assignment getTypeAssignment_11() { return cTypeAssignment_11; }
		
		//[Layer]
		public CrossReference getTypeLayerCrossReference_11_0() { return cTypeLayerCrossReference_11_0; }
		
		//ID
		public RuleCall getTypeLayerIDTerminalRuleCall_11_0_1() { return cTypeLayerIDTerminalRuleCall_11_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class SubRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.lab2.layeredStyle.LayeredStyleDSL.SubRelation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAllowedToUseKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAllowedToUseBelowKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//SubRelation:
		//	'AllowedToUse' | 'AllowedToUseBelow';
		@Override public ParserRule getRule() { return rule; }
		
		//'AllowedToUse' | 'AllowedToUseBelow'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'AllowedToUse'
		public Keyword getAllowedToUseKeyword_0() { return cAllowedToUseKeyword_0; }
		
		//'AllowedToUseBelow'
		public Keyword getAllowedToUseBelowKeyword_1() { return cAllowedToUseBelowKeyword_1; }
	}
	
	
	private final LayeredStyleElements pLayeredStyle;
	private final AbstractElementElements pAbstractElement;
	private final LayerElements pLayer;
	private final LayerSegmentElements pLayerSegment;
	private final RelationElements pRelation;
	private final SubRelationElements pSubRelation;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LayeredStyleDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLayeredStyle = new LayeredStyleElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pLayer = new LayerElements();
		this.pLayerSegment = new LayerSegmentElements();
		this.pRelation = new RelationElements();
		this.pSubRelation = new SubRelationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.lab2.layeredStyle.LayeredStyleDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LayeredStyle:
	//	elements+=AbstractElement*;
	public LayeredStyleElements getLayeredStyleAccess() {
		return pLayeredStyle;
	}
	
	public ParserRule getLayeredStyleRule() {
		return getLayeredStyleAccess().getRule();
	}
	
	//AbstractElement:
	//	Layer | Relation;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//Layer:
	//	'layer' name=ID '{'
	//	layerSegments+=LayerSegment*
	//	'}';
	public LayerElements getLayerAccess() {
		return pLayer;
	}
	
	public ParserRule getLayerRule() {
		return getLayerAccess().getRule();
	}
	
	//LayerSegment:
	//	'segment' name=ID;
	public LayerSegmentElements getLayerSegmentAccess() {
		return pLayerSegment;
	}
	
	public ParserRule getLayerSegmentRule() {
		return getLayerSegmentAccess().getRule();
	}
	
	//Relation:
	//	'relation' name=ID '{'
	//	'type' ':' SubRelation
	//	'source' ':' type=[Layer]
	//	'target' ':' type=[Layer]
	//	'}';
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//SubRelation:
	//	'AllowedToUse' | 'AllowedToUseBelow';
	public SubRelationElements getSubRelationAccess() {
		return pSubRelation;
	}
	
	public ParserRule getSubRelationRule() {
		return getSubRelationAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
