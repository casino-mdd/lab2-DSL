/*
 * generated by Xtext 2.18.0
 */
package org.xtext.lab2.layeredStyle.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.lab2.layeredStyle.layeredStyleDSL.Layer;
import org.xtext.lab2.layeredStyle.layeredStyleDSL.LayerSegment;
import org.xtext.lab2.layeredStyle.layeredStyleDSL.LayeredStyle;
import org.xtext.lab2.layeredStyle.layeredStyleDSL.LayeredStyleDSLPackage;
import org.xtext.lab2.layeredStyle.layeredStyleDSL.Relation;
import org.xtext.lab2.layeredStyle.services.LayeredStyleDSLGrammarAccess;

@SuppressWarnings("all")
public class LayeredStyleDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LayeredStyleDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LayeredStyleDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LayeredStyleDSLPackage.LAYER:
				sequence_Layer(context, (Layer) semanticObject); 
				return; 
			case LayeredStyleDSLPackage.LAYER_SEGMENT:
				sequence_LayerSegment(context, (LayerSegment) semanticObject); 
				return; 
			case LayeredStyleDSLPackage.LAYERED_STYLE:
				sequence_LayeredStyle(context, (LayeredStyle) semanticObject); 
				return; 
			case LayeredStyleDSLPackage.RELATION:
				sequence_Relation(context, (Relation) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     LayerSegment returns LayerSegment
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_LayerSegment(ISerializationContext context, LayerSegment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LayeredStyleDSLPackage.Literals.LAYER_SEGMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LayeredStyleDSLPackage.Literals.LAYER_SEGMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLayerSegmentAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Layer
	 *     Layer returns Layer
	 *
	 * Constraint:
	 *     (name=ID layerSegments+=LayerSegment*)
	 */
	protected void sequence_Layer(ISerializationContext context, Layer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LayeredStyle returns LayeredStyle
	 *
	 * Constraint:
	 *     elements+=AbstractElement+
	 */
	protected void sequence_LayeredStyle(ISerializationContext context, LayeredStyle semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Relation
	 *     Relation returns Relation
	 *
	 * Constraint:
	 *     (name=ID type=[Layer|ID] type=[Layer|ID])
	 */
	protected void sequence_Relation(ISerializationContext context, Relation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
